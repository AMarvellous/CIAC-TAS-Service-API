// <auto-generated />
using System;
using CIAC_TAS_Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CIACTASService.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231115034159_Add_InhabilitacionEstudiante_Table")]
    partial class Add_InhabilitacionEstudiante_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ConfiguracionPreguntaAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CantitdadPreguntas")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("ConfiguracionPreguntaAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.EstadoPreguntaAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("EstadoPreguntaAsa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "A"
                        },
                        new
                        {
                            Id = 2,
                            Estado = "I"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ExamenGenerado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ExamenGeneradoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroOpcion")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPregunta")
                        .HasColumnType("int");

                    b.Property<string>("OpcionTexto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreguntaTexto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("ExamenGenerado");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.GrupoPreguntaAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrupoPreguntaAsa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "AIRFRAME"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "GENERAL"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "POWERPLANT"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ImagenAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImagenAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstadoPreguntaAsaId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoPreguntaAsaId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPregunta")
                        .HasColumnType("int");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoPreguntaAsaId");

                    b.HasIndex("GrupoPreguntaAsaId");

                    b.ToTable("PreguntaAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsaImagenAsa", b =>
                {
                    b.Property<int>("PreguntaAsaId")
                        .HasColumnType("int");

                    b.Property<int>("ImagenAsaId")
                        .HasColumnType("int");

                    b.HasKey("PreguntaAsaId", "ImagenAsaId");

                    b.HasIndex("ImagenAsaId");

                    b.ToTable("PreguntaAsaImagenAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsaOpcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Opcion")
                        .HasColumnType("int");

                    b.Property<int>("PreguntaAsaId")
                        .HasColumnType("int");

                    b.Property<bool>("RespuestaValida")
                        .HasColumnType("bit");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaAsaId");

                    b.ToTable("PreguntaAsaOpcion");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.RespuestasAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorInterfaz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfiguracionId")
                        .HasColumnType("int");

                    b.Property<bool>("EsExamen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OpcionSeleccionadaId")
                        .HasColumnType("int");

                    b.Property<int>("PreguntaAsaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracionId");

                    b.HasIndex("OpcionSeleccionadaId");

                    b.HasIndex("PreguntaAsaId");

                    b.HasIndex("UserId");

                    b.ToTable("RespuestasAsas");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.RespuestasAsaConsolidado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("LoteRespuestasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConfiguracionId")
                        .HasColumnType("int");

                    b.Property<bool>("EsExamen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaLote")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroPregunta")
                        .HasColumnType("int");

                    b.Property<int?>("Opcion")
                        .HasColumnType("int");

                    b.Property<string>("PreguntaTexto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RespuestaCorrecta")
                        .HasColumnType("bit");

                    b.Property<string>("RespuestaTexto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "LoteRespuestasId");

                    b.HasIndex("ConfiguracionId");

                    b.HasIndex("UserId");

                    b.ToTable("RespuestasAsaConsolidado");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AsistenciaEstudianteHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoAsistenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsistenciaEstudianteHeaderId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("TipoAsistenciaId");

                    b.ToTable("AsistenciaEstudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudianteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("int");

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalHorasPracticas")
                        .HasColumnType("int");

                    b.Property<int>("TotalHorasTeoricas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ModuloId");

                    b.HasIndex("ProgramaId");

                    b.ToTable("AsistenciaEstudianteHeader");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarnetIdentidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelularMadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelularPadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelularTutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoSeguro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoTas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExamenPsicofisiologico")
                        .HasColumnType("bit");

                    b.Property<bool>("ExperienciaPrevia")
                        .HasColumnType("bit");

                    b.Property<string>("FamiliarTutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaSeguro")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InstruccionPrevia")
                        .HasColumnType("bit");

                    b.Property<string>("LugarNacimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreMadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreTutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VacunaAntitetanica")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Estudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudianteGrupo", b =>
                {
                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.HasKey("EstudianteId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("EstudianteGrupo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudianteMateria", b =>
                {
                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("EstudianteId", "GrupoId", "MateriaId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("MateriaId");

                    b.ToTable("EstudianteMateria");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudiantePrograma", b =>
                {
                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("int");

                    b.HasKey("EstudianteId", "ProgramaId");

                    b.HasIndex("ProgramaId");

                    b.ToTable("EstudiantePrograma");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.InhabilitacionEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.ToTable("InhabilitacionEstudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Nota")
                        .HasColumnType("float");

                    b.Property<int>("RegistroNotaEstudianteHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("TipoRegistroNotaEstudianteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistroNotaEstudianteHeaderId");

                    b.HasIndex("TipoRegistroNotaEstudianteId");

                    b.ToTable("RegistroNotaEstudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudianteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("RegistroNotaHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("RegistroNotaHeaderId");

                    b.ToTable("RegistroNotaEstudianteHeader");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<int>("PorcentajeDominioTotal")
                        .HasColumnType("int");

                    b.Property<int>("PorcentajeProgresoTotal")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoRegistroNotaHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ModuloId");

                    b.HasIndex("ProgramaId");

                    b.HasIndex("TipoRegistroNotaHeaderId");

                    b.ToTable("RegistroNotaHeader");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoRegistroNotaEstudiante");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Progreso"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Dominio"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Recuperatorio"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoRegistroNotaHeader");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Regular"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Tutorial"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Administrativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cursos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienciaInstruccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienciaLaboral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Formacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenciaCarnetIdentidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LugarNacimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VacunaAntitetanica")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Administrativo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoTas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cursos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienciaInstruccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienciaLaboral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Formacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroLicencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VacunaAntitetanica")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MateriaCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materia");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MateriaCodigo = "1.1",
                            Nombre = "Requerimientos, Leyes y Reglamentos de Aviación Civil"
                        },
                        new
                        {
                            Id = 2,
                            MateriaCodigo = "2.1",
                            Nombre = "Matemáticas"
                        },
                        new
                        {
                            Id = 3,
                            MateriaCodigo = "2.2",
                            Nombre = "Física"
                        },
                        new
                        {
                            Id = 4,
                            MateriaCodigo = "2.3",
                            Nombre = "Química"
                        },
                        new
                        {
                            Id = 5,
                            MateriaCodigo = "2.4",
                            Nombre = "Dibujo Técnico"
                        },
                        new
                        {
                            Id = 6,
                            MateriaCodigo = "2.5",
                            Nombre = "Control de vuelo y aerodinámica en ala fija y helicóptero"
                        },
                        new
                        {
                            Id = 7,
                            MateriaCodigo = "2.6",
                            Nombre = "Peso y balance"
                        },
                        new
                        {
                            Id = 8,
                            MateriaCodigo = "2.7",
                            Nombre = "Lineas de fluidos y terminales"
                        },
                        new
                        {
                            Id = 9,
                            MateriaCodigo = "3.1",
                            Nombre = "Materiales y Procesos"
                        },
                        new
                        {
                            Id = 10,
                            MateriaCodigo = "3.2",
                            Nombre = "Electricidad básica"
                        },
                        new
                        {
                            Id = 11,
                            MateriaCodigo = "3.3",
                            Nombre = "Soldadura"
                        },
                        new
                        {
                            Id = 12,
                            MateriaCodigo = "3.4",
                            Nombre = "Corrosión"
                        },
                        new
                        {
                            Id = 13,
                            MateriaCodigo = "3.5",
                            Nombre = "Operación y servicio en tierra"
                        },
                        new
                        {
                            Id = 14,
                            MateriaCodigo = "3.6",
                            Nombre = "Ensayos no destructivos"
                        },
                        new
                        {
                            Id = 15,
                            MateriaCodigo = "3.7",
                            Nombre = "Estructuras I"
                        },
                        new
                        {
                            Id = 16,
                            MateriaCodigo = "3.8",
                            Nombre = "Sistema de tren de aterrizaje"
                        },
                        new
                        {
                            Id = 17,
                            MateriaCodigo = "3.9",
                            Nombre = "Sistema hidráulico y neumático"
                        },
                        new
                        {
                            Id = 18,
                            MateriaCodigo = "3.10",
                            Nombre = "Sistema de control atmosférico (cabina)"
                        },
                        new
                        {
                            Id = 19,
                            MateriaCodigo = "3.11",
                            Nombre = "Sistema de combustible"
                        },
                        new
                        {
                            Id = 20,
                            MateriaCodigo = "3.12",
                            Nombre = "Sistema de control de lluvia y hielo"
                        },
                        new
                        {
                            Id = 21,
                            MateriaCodigo = "3.13",
                            Nombre = "Sistema de protección de fuego"
                        },
                        new
                        {
                            Id = 22,
                            MateriaCodigo = "3.14",
                            Nombre = "Estructuras II"
                        },
                        new
                        {
                            Id = 23,
                            MateriaCodigo = "4.1",
                            Nombre = "Motores recíprocos"
                        },
                        new
                        {
                            Id = 24,
                            MateriaCodigo = "4.2",
                            Nombre = "Hélices"
                        },
                        new
                        {
                            Id = 25,
                            MateriaCodigo = "4.3",
                            Nombre = "Motores a turbina"
                        },
                        new
                        {
                            Id = 26,
                            MateriaCodigo = "4.4",
                            Nombre = "Sistema de combustible"
                        },
                        new
                        {
                            Id = 27,
                            MateriaCodigo = "5.1",
                            Nombre = "Materiales y prácticas de mantenimiento"
                        },
                        new
                        {
                            Id = 28,
                            MateriaCodigo = "5.2",
                            Nombre = "Fundamentos de Electricidad y Electrónica"
                        },
                        new
                        {
                            Id = 29,
                            MateriaCodigo = "5.3",
                            Nombre = "Técnicas digitales, computadoras y dispositivos asociados"
                        },
                        new
                        {
                            Id = 30,
                            MateriaCodigo = "5.4",
                            Nombre = "Sistemas eléctricos de aeronaves"
                        },
                        new
                        {
                            Id = 31,
                            MateriaCodigo = "5.5",
                            Nombre = "Sistemas de instrumentos de aeronaves"
                        },
                        new
                        {
                            Id = 32,
                            MateriaCodigo = "6.1",
                            Nombre = "Sistemas automáticos de control de vuelo (AFCS): Ala Fija y Rotatoria"
                        },
                        new
                        {
                            Id = 33,
                            MateriaCodigo = "6.2",
                            Nombre = "Sistemas de navegación Inercial de aeronaves (INS)"
                        },
                        new
                        {
                            Id = 34,
                            MateriaCodigo = "6.3",
                            Nombre = "Sistemas de radio y radio navegación de aeronaves"
                        },
                        new
                        {
                            Id = 35,
                            MateriaCodigo = "7.1",
                            Nombre = "Actuación humana"
                        },
                        new
                        {
                            Id = 36,
                            MateriaCodigo = "8.1",
                            Nombre = "Prácticas de habilidades de mantenimiento: Célula"
                        },
                        new
                        {
                            Id = 37,
                            MateriaCodigo = "9.1",
                            Nombre = "Prácticas de habilidades de mantenimiento: Sistema Motopropulsor"
                        },
                        new
                        {
                            Id = 38,
                            MateriaCodigo = "10.1",
                            Nombre = "Prácticas de habilidades de mantenimiento: Aviónica, Electricidad, instrumentos, radio y vuelo automático."
                        },
                        new
                        {
                            Id = 39,
                            MateriaCodigo = "11.1",
                            Nombre = "Prácticas aplicadas a las operaciones de mantenimiento de Línea"
                        },
                        new
                        {
                            Id = 40,
                            MateriaCodigo = "11.2",
                            Nombre = "Prácticas aplicadas a las operaciones de producción de Base"
                        },
                        new
                        {
                            Id = 41,
                            MateriaCodigo = "12.1",
                            Nombre = "Inglés"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuloCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modulo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModuloCodigo = "1",
                            Nombre = "Modulo 1"
                        },
                        new
                        {
                            Id = 2,
                            ModuloCodigo = "2",
                            Nombre = "Modulo 2"
                        },
                        new
                        {
                            Id = 3,
                            ModuloCodigo = "3",
                            Nombre = "Modulo 3"
                        },
                        new
                        {
                            Id = 4,
                            ModuloCodigo = "4",
                            Nombre = "Modulo 4"
                        },
                        new
                        {
                            Id = 5,
                            ModuloCodigo = "5",
                            Nombre = "Modulo 5"
                        },
                        new
                        {
                            Id = 6,
                            ModuloCodigo = "6",
                            Nombre = "Modulo 6"
                        },
                        new
                        {
                            Id = 7,
                            ModuloCodigo = "7",
                            Nombre = "Modulo 7"
                        },
                        new
                        {
                            Id = 8,
                            ModuloCodigo = "8",
                            Nombre = "Modulo 8"
                        },
                        new
                        {
                            Id = 9,
                            ModuloCodigo = "9",
                            Nombre = "Modulo 9"
                        },
                        new
                        {
                            Id = 10,
                            ModuloCodigo = "10",
                            Nombre = "Modulo 10"
                        },
                        new
                        {
                            Id = 11,
                            ModuloCodigo = "11",
                            Nombre = "Modulo 11"
                        },
                        new
                        {
                            Id = 12,
                            ModuloCodigo = "12",
                            Nombre = "Modulo 12"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.ModuloMateria", b =>
                {
                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("ModuloId", "MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("ModuloMateria");

                    b.HasData(
                        new
                        {
                            ModuloId = 1,
                            MateriaId = 1
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 2
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 3
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 4
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 5
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 6
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 7
                        },
                        new
                        {
                            ModuloId = 2,
                            MateriaId = 8
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 9
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 10
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 11
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 12
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 13
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 14
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 15
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 16
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 17
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 18
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 19
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 20
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 21
                        },
                        new
                        {
                            ModuloId = 3,
                            MateriaId = 22
                        },
                        new
                        {
                            ModuloId = 4,
                            MateriaId = 23
                        },
                        new
                        {
                            ModuloId = 4,
                            MateriaId = 24
                        },
                        new
                        {
                            ModuloId = 4,
                            MateriaId = 25
                        },
                        new
                        {
                            ModuloId = 4,
                            MateriaId = 26
                        },
                        new
                        {
                            ModuloId = 5,
                            MateriaId = 27
                        },
                        new
                        {
                            ModuloId = 5,
                            MateriaId = 28
                        },
                        new
                        {
                            ModuloId = 5,
                            MateriaId = 29
                        },
                        new
                        {
                            ModuloId = 5,
                            MateriaId = 30
                        },
                        new
                        {
                            ModuloId = 5,
                            MateriaId = 31
                        },
                        new
                        {
                            ModuloId = 6,
                            MateriaId = 32
                        },
                        new
                        {
                            ModuloId = 6,
                            MateriaId = 33
                        },
                        new
                        {
                            ModuloId = 6,
                            MateriaId = 34
                        },
                        new
                        {
                            ModuloId = 7,
                            MateriaId = 35
                        },
                        new
                        {
                            ModuloId = 8,
                            MateriaId = 36
                        },
                        new
                        {
                            ModuloId = 9,
                            MateriaId = 37
                        },
                        new
                        {
                            ModuloId = 10,
                            MateriaId = 38
                        },
                        new
                        {
                            ModuloId = 11,
                            MateriaId = 39
                        },
                        new
                        {
                            ModuloId = 11,
                            MateriaId = 40
                        },
                        new
                        {
                            ModuloId = 12,
                            MateriaId = 41
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Programa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Programa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "TMA"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.ProgramaAnaliticoPdf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Gestion")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<string>("RutaPdf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.ToTable("ProgramaAnaliticoPdf");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.TipoAsistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoAsistencia");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Presente"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Justificada"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Injustificada"
                        });
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.InstructorDomain.InstructorMateria", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "GrupoId", "MateriaId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("MateriaId");

                    b.ToTable("InstructorMateria");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.InstructorDomain.InstructorProgramaAnalitico", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaAnaliticoPdfId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "ProgramaAnaliticoPdfId");

                    b.HasIndex("ProgramaAnaliticoPdfId");

                    b.ToTable("InstructorProgramaAnalitico");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Menu.MenuModuloWeb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Estilo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuModulosWeb");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Menu.MenuSubModuloWeb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Estilo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pagina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.ToTable("MenuSubModulosWeb");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ConfiguracionPreguntaAsa", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("ConfiguracionPreguntaAsa")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ExamenGenerado", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupos")
                        .WithMany("ExamenGenerado")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupos");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.ASA.EstadoPreguntaAsa", "EstadoPreguntaAsa")
                        .WithOne("PreguntaAsa")
                        .HasForeignKey("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", "EstadoPreguntaAsaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.ASA.GrupoPreguntaAsa", "GrupoPreguntaAsa")
                        .WithOne("PreguntaAsa")
                        .HasForeignKey("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", "GrupoPreguntaAsaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoPreguntaAsa");

                    b.Navigation("GrupoPreguntaAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsaImagenAsa", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.ASA.ImagenAsa", "ImagenAsa")
                        .WithMany("PreguntaAsaImagenAsas")
                        .HasForeignKey("ImagenAsaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", "PreguntaAsa")
                        .WithMany("PreguntaAsaImagenAsas")
                        .HasForeignKey("PreguntaAsaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImagenAsa");

                    b.Navigation("PreguntaAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsaOpcion", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", "PreguntaAsa")
                        .WithMany("PreguntaAsaOpciones")
                        .HasForeignKey("PreguntaAsaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreguntaAsa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.RespuestasAsa", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.ASA.ConfiguracionPreguntaAsa", "ConfiguracionPreguntaAsa")
                        .WithMany()
                        .HasForeignKey("ConfiguracionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CIAC_TAS_Service.Domain.ASA.PreguntaAsaOpcion", "PreguntaAsaOpcionSeleccionada")
                        .WithMany()
                        .HasForeignKey("OpcionSeleccionadaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", "PreguntaAsa")
                        .WithMany("RespuestasAsas")
                        .HasForeignKey("PreguntaAsaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfiguracionPreguntaAsa");

                    b.Navigation("PreguntaAsa");

                    b.Navigation("PreguntaAsaOpcionSeleccionada");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.RespuestasAsaConsolidado", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.ASA.ConfiguracionPreguntaAsa", "ConfiguracionPreguntaAsa")
                        .WithMany()
                        .HasForeignKey("ConfiguracionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfiguracionPreguntaAsa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudiante", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudianteHeader", "AsistenciaEstudianteHeader")
                        .WithMany("AsistenciaEstudiantes")
                        .HasForeignKey("AsistenciaEstudianteHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("AsistenciaEstudiantes")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.TipoAsistencia", "TipoAsistencia")
                        .WithMany("AsistenciaEstudiantes")
                        .HasForeignKey("TipoAsistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsistenciaEstudianteHeader");

                    b.Navigation("Estudiante");

                    b.Navigation("TipoAsistencia");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudianteHeader", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("AsistenciaEstudianteHeaders")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Instructor", "Instructor")
                        .WithMany("AsistenciaEstudianteHeaders")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany("AsistenciaEstudianteHeaders")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Modulo", "Modulo")
                        .WithMany("AsistenciaEstudianteHeaders")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Programa", "Programa")
                        .WithMany("AsistenciaEstudianteHeaders")
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Instructor");

                    b.Navigation("Materia");

                    b.Navigation("Modulo");

                    b.Navigation("Programa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.Estudiante", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudianteGrupo", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("EstudianteGrupos")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("EstudianteGrupos")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudianteMateria", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("EstudianteMaterias")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("EstudianteMaterias")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany("EstudianteMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Grupo");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.EstudiantePrograma", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("EstudianteProgramas")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Programa", "Programa")
                        .WithMany("EstudianteProgramas")
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Programa");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.InhabilitacionEstudiante", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("InhabilitacionEstudiantes")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudiante", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudianteHeader", "RegistroNotaEstudianteHeader")
                        .WithMany("RegistroNotaEstudiantes")
                        .HasForeignKey("RegistroNotaEstudianteHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaEstudiante", "TipoRegistroNotaEstudiante")
                        .WithMany("RegistroNotaEstudiantes")
                        .HasForeignKey("TipoRegistroNotaEstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistroNotaEstudianteHeader");

                    b.Navigation("TipoRegistroNotaEstudiante");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudianteHeader", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.Estudiante", "Estudiante")
                        .WithMany("RegistroNotaEstudianteHeaders")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaHeader", "RegistroNotaHeader")
                        .WithMany("RegistroNotaEstudianteHeaders")
                        .HasForeignKey("RegistroNotaHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("RegistroNotaHeader");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaHeader", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Instructor", "Instructor")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Modulo", "Modulo")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Programa", "Programa")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaHeader", "TipoRegistroNotaHeader")
                        .WithMany("RegistroNotaHeaders")
                        .HasForeignKey("TipoRegistroNotaHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Instructor");

                    b.Navigation("Materia");

                    b.Navigation("Modulo");

                    b.Navigation("Programa");

                    b.Navigation("TipoRegistroNotaHeader");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Administrativo", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Instructor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.ModuloMateria", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany("ModuloMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Modulo", "Modulo")
                        .WithMany("ModuloMaterias")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.ProgramaAnaliticoPdf", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.InstructorDomain.InstructorMateria", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Grupo", "Grupo")
                        .WithMany("InstructorMaterias")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Instructor", "Instructor")
                        .WithMany("InstructorMaterias")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.Materia", "Materia")
                        .WithMany("InstructorMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Instructor");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.InstructorDomain.InstructorProgramaAnalitico", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.General.Instructor", "Instructor")
                        .WithMany("InstructorProgramaAnaliticos")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CIAC_TAS_Service.Domain.General.ProgramaAnaliticoPdf", "ProgramaAnaliticoPdf")
                        .WithMany("InstructorProgramaAnaliticos")
                        .HasForeignKey("ProgramaAnaliticoPdfId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("ProgramaAnaliticoPdf");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Menu.MenuModuloWeb", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Menu.MenuSubModuloWeb", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Menu.MenuModuloWeb", "MenuModuloWeb")
                        .WithMany("MenuSubModulosWeb")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuModuloWeb");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Post", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Tag", b =>
                {
                    b.HasOne("CIAC_TAS_Service.Domain.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.EstadoPreguntaAsa", b =>
                {
                    b.Navigation("PreguntaAsa")
                        .IsRequired();
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.GrupoPreguntaAsa", b =>
                {
                    b.Navigation("PreguntaAsa")
                        .IsRequired();
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.ImagenAsa", b =>
                {
                    b.Navigation("PreguntaAsaImagenAsas");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.ASA.PreguntaAsa", b =>
                {
                    b.Navigation("PreguntaAsaImagenAsas");

                    b.Navigation("PreguntaAsaOpciones");

                    b.Navigation("RespuestasAsas");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.AsistenciaEstudianteHeader", b =>
                {
                    b.Navigation("AsistenciaEstudiantes");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.Estudiante", b =>
                {
                    b.Navigation("AsistenciaEstudiantes");

                    b.Navigation("EstudianteGrupos");

                    b.Navigation("EstudianteMaterias");

                    b.Navigation("EstudianteProgramas");

                    b.Navigation("InhabilitacionEstudiantes");

                    b.Navigation("RegistroNotaEstudianteHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaEstudianteHeader", b =>
                {
                    b.Navigation("RegistroNotaEstudiantes");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.RegistroNotaHeader", b =>
                {
                    b.Navigation("RegistroNotaEstudianteHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaEstudiante", b =>
                {
                    b.Navigation("RegistroNotaEstudiantes");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Estudiante.TipoRegistroNotaHeader", b =>
                {
                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Grupo", b =>
                {
                    b.Navigation("AsistenciaEstudianteHeaders");

                    b.Navigation("ConfiguracionPreguntaAsa");

                    b.Navigation("EstudianteGrupos");

                    b.Navigation("EstudianteMaterias");

                    b.Navigation("ExamenGenerado");

                    b.Navigation("InstructorMaterias");

                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Instructor", b =>
                {
                    b.Navigation("AsistenciaEstudianteHeaders");

                    b.Navigation("InstructorMaterias");

                    b.Navigation("InstructorProgramaAnaliticos");

                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Materia", b =>
                {
                    b.Navigation("AsistenciaEstudianteHeaders");

                    b.Navigation("EstudianteMaterias");

                    b.Navigation("InstructorMaterias");

                    b.Navigation("ModuloMaterias");

                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Modulo", b =>
                {
                    b.Navigation("AsistenciaEstudianteHeaders");

                    b.Navigation("ModuloMaterias");

                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.Programa", b =>
                {
                    b.Navigation("AsistenciaEstudianteHeaders");

                    b.Navigation("EstudianteProgramas");

                    b.Navigation("RegistroNotaHeaders");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.ProgramaAnaliticoPdf", b =>
                {
                    b.Navigation("InstructorProgramaAnaliticos");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.General.TipoAsistencia", b =>
                {
                    b.Navigation("AsistenciaEstudiantes");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Menu.MenuModuloWeb", b =>
                {
                    b.Navigation("MenuSubModulosWeb");
                });

            modelBuilder.Entity("CIAC_TAS_Service.Domain.Post", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
